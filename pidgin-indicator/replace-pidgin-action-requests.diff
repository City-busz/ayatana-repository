From 9c39dfc1c415d017057f8a87d503b9a3f9f26603 Mon Sep 17 00:00:00 2001
From: Jakub Adam <jakub.adam@ktknet.cz>
Date: Tue, 6 Sep 2011 22:58:23 +0200
Subject: [PATCH] replace-pidgin-action-requests.diff

---
 src/Makefile.am        |    3 +
 src/common.c           |   67 ++++++++++++++++++
 src/common.h           |   38 ++++++++++
 src/pidgin-libnotify.c |   37 +++++-----
 src/request.c          |  182 ++++++++++++++++++++++++++++++++++++++++++++++++
 6 files changed, 320 insertions(+), 27 deletions(-)
 create mode 100644 src/common.c
 create mode 100644 src/common.h
 create mode 100644 src/request.c

Index: pidgin-libnotify-0.14/src/Makefile.am
===================================================================
--- pidgin-libnotify-0.14.orig/src/Makefile.am	2012-11-16 10:14:30.371591653 +0100
+++ pidgin-libnotify-0.14/src/Makefile.am	2012-11-16 10:15:19.187589931 +0100
@@ -8,6 +8,9 @@
 
 pidgin_libnotify_la_SOURCES = \
 	pidgin-libnotify.c \
+	common.h \ 
+	common.c \
+	request.c \
 	gln_intl.h
 
 pidgin_libnotify_la_LIBADD = $(LIBNOTIFY_LIBS) $(DBUS_LIBS) $(GTK_LIBS)
Index: pidgin-libnotify-0.14/src/common.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ pidgin-libnotify-0.14/src/common.c	2012-11-16 10:15:19.191589930 +0100
@@ -0,0 +1,67 @@
+/*
+ * Pidgin-libnotify - Provides a libnotify interface for Pidgin
+ * Copyright (C) 2005-2007 Duarte Henriques
+ * Copyright (C) 2011 Jakub Adam
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ */
+
+#include "common.h"
+
+#include <debug.h>
+#include <request.h>
+
+gboolean
+server_has_caps(const char *id)
+{
+	GList *caps = notify_get_server_caps();
+	gboolean result;
+	result = (g_list_find_custom(caps, id, (GCompareFunc)g_strcmp0) != NULL);
+	g_list_free_full(caps, g_free);
+	return result;
+}
+
+typedef struct {
+	int id;
+	PurpleRequestActionCb callback;
+} ActionData;
+
+NotifyNotification *
+notification_new(const gchar *title, const gchar *body)
+{
+	NotifyNotification *notification;
+
+/* libnotify 0.7.0 and later has no support for attaching to widgets */
+#if NOTIFY_CHECK_VERSION(0,7,0)
+	notification = notify_notification_new(title, body, NULL);
+#else
+	notification = notify_notification_new(title, body, NULL, NULL);
+#endif
+	purple_debug_info(PLUGIN_ID, "notification_new(), title: '%s', body: '%s'",
+					  title, body);
+
+	notify_notification_set_urgency(notification, NOTIFY_URGENCY_NORMAL);
+
+	return notification;
+}
+
+void
+notification_show(NotifyNotification *notification)
+{
+	if (!notify_notification_show (notification, NULL)) {
+		purple_debug_error (PLUGIN_ID, "notification_show(), "
+						    "failed to send notification\n");
+	}
+}
Index: pidgin-libnotify-0.14/src/common.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ pidgin-libnotify-0.14/src/common.h	2012-11-16 10:15:19.191589930 +0100
@@ -0,0 +1,38 @@
+/*
+ * Pidgin-libnotify - Provides a libnotify interface for Pidgin
+ * Copyright (C) 2005-2007 Duarte Henriques
+ * Copyright (C) 2011 Jakub Adam
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ */
+
+#ifndef PIDGIN_LIBNOTIFY_COMMON_H
+#define PIDGIN_LIBNOTIFY_COMMON_H
+
+#include <libnotify/notify.h>
+
+#define PLUGIN_ID "pidgin-libnotify"
+
+#ifndef NOTIFY_CHECK_VERSION
+#define NOTIFY_CHECK_VERSION(x,y,z) 0
+#endif
+
+gboolean server_has_caps(const char *id);
+
+NotifyNotification * notification_new(const gchar *title, const gchar *body);
+
+void notification_show(NotifyNotification *notification);
+
+#endif // PIDGIN_LIBNOTIFY_COMMON_H
Index: pidgin-libnotify-0.14/src/pidgin-libnotify.c
===================================================================
--- pidgin-libnotify-0.14.orig/src/pidgin-libnotify.c	2012-11-16 10:15:16.971590010 +0100
+++ pidgin-libnotify-0.14/src/pidgin-libnotify.c	2012-11-16 10:15:19.191589930 +0100
@@ -21,6 +21,7 @@
 #include <config.h>
 #endif
 
+#include "common.h"
 #include "gln_intl.h"
 
 #ifndef PURPLE_PLUGINS
@@ -82,6 +83,11 @@
                             _("Only when available"));
 	purple_plugin_pref_frame_add (frame, ppref);
 
+	ppref = purple_plugin_pref_new_with_name_and_label (
+                            "/plugins/gtk/libnotify/replace_requests",
+                            _("Replace Pidgin request dialogs with libnotify popups"));
+	purple_plugin_pref_frame_add (frame, ppref);
+
 	return frame;
 }
 
@@ -463,6 +469,9 @@
 	notify_msg_sent (account, sender, message);
 }
 
+extern void attach_request_ui_ops ();
+extern void detach_request_ui_ops ();
+
 static gboolean
 plugin_load (PurplePlugin *plugin)
 {
@@ -495,6 +504,8 @@
 	purple_signal_connect (conn_handle, "signed-on", plugin,
 						PURPLE_CALLBACK(event_connection_throttle), NULL);
 
+	attach_request_ui_ops ();
+
 	return TRUE;
 }
 
@@ -522,6 +533,8 @@
 	purple_signal_disconnect (conn_handle, "signed-on", plugin,
 							PURPLE_CALLBACK(event_connection_throttle));
 
+	detach_request_ui_ops ();
+
 	g_hash_table_destroy (buddy_hash);
 
 	notify_uninit ();
Index: pidgin-libnotify-0.14/src/request.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ pidgin-libnotify-0.14/src/request.c	2012-11-16 10:15:19.191589930 +0100
@@ -0,0 +1,182 @@
+/*
+ * Pidgin-libnotify - Provides a libnotify interface for Pidgin
+ * Copyright (C) 2011 Jakub Adam
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ */
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include <debug.h>
+#include <gtkutils.h>
+#include <request.h>
+
+#include <string.h>
+
+#include "common.h"
+
+typedef struct {
+	int id;
+	PurpleRequestActionCb callback;
+} ActionData;
+
+static void
+action_cb (NotifyNotification *notification, char *action,
+		   ActionData *data)
+{
+	data->callback(g_object_get_data(G_OBJECT(notification), "user_data"),
+				   data->id);
+}
+
+GSList *req_notifications = NULL;
+
+static gboolean
+closed_cb (NotifyNotification *notification)
+{
+	req_notifications = g_slist_remove(req_notifications, notification);
+	g_object_unref(G_OBJECT(notification));
+
+	return FALSE;
+}
+
+static gchar *
+remove_accelerators (const gchar *s)
+{
+	gchar **split = g_strsplit(s, "_", -1);
+	gchar *result = g_strjoinv("", split);
+	g_strfreev(split);
+	return result;
+}
+
+static PurpleRequestUiOps ops;
+static PurpleRequestUiOps *original_ops = NULL;
+
+static void *
+notify_request_action_with_icon(const char *title, const char *primary,
+								const char *secondary, int default_action,
+								PurpleAccount *account, const char *who,
+								PurpleConversation *conv,
+								gconstpointer icon_data, gsize icon_size,
+								void *user_data,
+								size_t action_count, va_list actions)
+{
+	NotifyNotification *notification;
+	int i;
+
+	if (!purple_prefs_get_bool("/plugins/gtk/libnotify/replace_requests") ||
+		!server_has_caps("actions")) {
+		return original_ops->request_action_with_icon(title, primary, secondary,
+													  default_action, account,
+													  who, conv, icon_data,
+													  icon_size, user_data,
+													  action_count, actions);
+	}
+
+	notification = notification_new(primary, secondary);
+
+	if (icon_data) {
+		GdkPixbuf *pixbuf = pidgin_pixbuf_from_data(icon_data, icon_size);
+		if (pixbuf) {
+			notify_notification_set_icon_from_pixbuf(notification, pixbuf);
+			g_object_unref (pixbuf);
+		} else {
+			purple_debug_warning(PLUGIN_ID, "notify_request_action_with_icon(), "
+								 "failed to parse request icon\n");
+		}
+	}
+
+	notify_notification_set_hint(notification, "resident",
+								 g_variant_new_boolean(TRUE));
+	notify_notification_set_timeout(notification, NOTIFY_EXPIRES_NEVER);
+
+	g_signal_connect(notification, "closed", G_CALLBACK(closed_cb), NULL);
+
+	for (i = 0; i != action_count; ++i) {
+		char *label = remove_accelerators(va_arg (actions, const char *));
+		ActionData *data = g_new(ActionData, 1);
+		data->id = i;
+		data->callback = va_arg(actions, PurpleRequestActionCb);
+
+		notify_notification_add_action(notification,
+									   (default_action == i) ? "default" : label,
+									   label,
+									   (NotifyActionCallback) action_cb,
+									   data, g_free);
+		g_free(label);
+	}
+
+	g_object_set_data(G_OBJECT(notification), "user_data", user_data);
+
+	req_notifications = g_slist_append(req_notifications, notification);
+
+	notification_show(notification);
+
+	return notification;
+}
+
+static void *
+notify_request_action(const char *title, const char *primary,
+					  const char *secondary, int default_action,
+					  PurpleAccount *account, const char *who,
+					  PurpleConversation *conv, void *user_data,
+					  size_t action_count, va_list actions)
+{
+	if (!purple_prefs_get_bool("/plugins/gtk/libnotify/replace_requests") ||
+		!server_has_caps("actions")) {
+		return original_ops->request_action(title, primary, secondary,
+											default_action, account, who, conv,
+											user_data, action_count, actions);
+	}
+
+	return notify_request_action_with_icon(title, primary, secondary,
+									   	   default_action, account, who, conv,
+									   	   NULL, 0, user_data, action_count,
+									   	   actions);
+}
+
+static void
+notify_close_request(PurpleRequestType type, void *ui_handle)
+{
+	GSList *l = g_slist_find(req_notifications, ui_handle);
+	if (l) {
+		NotifyNotification *notification = l->data;
+		notify_notification_close(notification, NULL);
+	} else {
+		original_ops->close_request(type, ui_handle);
+	}
+}
+
+void
+attach_request_ui_ops()
+{
+	original_ops = purple_request_get_ui_ops();
+	if (original_ops) {
+		memcpy(&ops, original_ops, sizeof (ops));
+		ops.request_action = notify_request_action;
+		ops.request_action_with_icon = notify_request_action_with_icon;
+		ops.close_request = notify_close_request;
+		purple_request_set_ui_ops(&ops);
+	}
+}
+
+void
+detach_request_ui_ops()
+{
+	if (original_ops) {
+		purple_request_set_ui_ops(original_ops);
+	}
+}
