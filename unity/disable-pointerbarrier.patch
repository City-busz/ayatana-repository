diff -Naur unity-6.12.0.orig/launcher/PointerBarrier.cpp unity-6.12.0/launcher/PointerBarrier.cpp
--- unity-6.12.0.orig/launcher/PointerBarrier.cpp	2012-11-06 15:34:13.000000000 +0100
+++ unity-6.12.0/launcher/PointerBarrier.cpp	2012-11-22 10:45:28.046339668 +0100
@@ -65,18 +65,8 @@
   int maj,min;
   XFixesQueryVersion(dpy, &maj, &min);
 
-  barrier = XFixesCreatePointerBarrierVelocity(dpy,
-                                               DefaultRootWindow(dpy),
-                                               x1, y1,
-                                               x2, y2,
-                                               static_cast<int>(direction),
-                                               threshold,
-                                               0,
-                                               NULL);
-
   if (!local::is_selected_for)
   {
-    XFixesSelectBarrierInput(dpy, DefaultRootWindow(dpy), 0xdeadbeef);
     local::is_selected_for = true;
   }
 
@@ -104,7 +94,7 @@
 
 void PointerBarrierWrapper::ReleaseBarrier(int event_id)
 {
-  XFixesBarrierReleasePointer(nux::GetGraphicsDisplay()->GetX11Display(), barrier, event_id);
+  return;
 }
 
 void PointerBarrierWrapper::EmitCurrentData(int event_id, int x, int y)
@@ -123,45 +113,6 @@
 
 bool PointerBarrierWrapper::HandleEvent(XEvent xevent)
 {
-  if (xevent.type - event_base_ == XFixesBarrierNotify)
-  {
-    auto notify_event = reinterpret_cast<XFixesBarrierNotifyEvent*>(&xevent);
-
-    if (notify_event->barrier == barrier && notify_event->subtype == XFixesBarrierHitNotify)
-    {
-      smoothing_accum_ += notify_event->velocity;
-      smoothing_count_++;
-
-      if (released)
-      {
-        /* If the barrier is released, just emit the current event without
-         * waiting, so there won't be any delay on releasing the barrier. */
-        smoothing_timeout_.reset();
-        auto event = std::make_shared<BarrierEvent>(notify_event->x, notify_event->y,
-                                                    notify_event->velocity, notify_event->event_id);
-        barrier_event.emit(this, event);
-      }
-      else if (!smoothing_timeout_)
-      {
-        int x = notify_event->x;
-        int y = notify_event->y;
-        int event = notify_event->event_id;
-
-        auto smoothing_cb = [&, event, x, y] ()
-        {
-          EmitCurrentData(event, x, y);
-
-          smoothing_timeout_.reset();
-          return false;
-        };
-
-        smoothing_timeout_.reset(new glib::Timeout(smoothing, smoothing_cb));
-      }
-    }
-
-    return notify_event->barrier == barrier;
-  }
-
   return false;
 }
 
