=== modified file 'dash/previews/PreviewContainer.cpp'
--- dash/previews/PreviewContainer.cpp	2012-09-19 14:40:41 +0000
+++ dash/previews/PreviewContainer.cpp	2012-12-04 08:54:05 +0000
@@ -571,7 +571,7 @@
 
 float PreviewContainer::GetSwipeAnimationProgress(struct timespec const& current) const
 {
-  int time_delta = TimeUtil::TimeDelta(&current, &last_progress_time_);
+  DeltaTime time_delta = TimeUtil::TimeDelta(&current, &last_progress_time_);
   float progress = content_layout_->GetAnimationProgress() + (navigation_progress_speed_ * time_delta);
 
   return progress;

=== modified file 'launcher/Launcher.cpp'
--- launcher/Launcher.cpp	2012-11-08 09:10:21 +0000
+++ launcher/Launcher.cpp	2012-12-04 08:54:05 +0000
@@ -504,13 +504,13 @@
   if (icon->IsVisible())
   {
     struct timespec icon_visible_time = icon->GetQuirkTime(AbstractLauncherIcon::Quirk::VISIBLE);
-    int enter_ms = unity::TimeUtil::TimeDelta(&current, &icon_visible_time);
+    DeltaTime enter_ms = unity::TimeUtil::TimeDelta(&current, &icon_visible_time);
     return CLAMP((float) enter_ms / (float) ANIM_DURATION_SHORT, 0.0f, 1.0f);
   }
   else
   {
     struct timespec icon_hide_time = icon->GetQuirkTime(AbstractLauncherIcon::Quirk::VISIBLE);
-    int hide_ms = unity::TimeUtil::TimeDelta(&current, &icon_hide_time);
+    DeltaTime hide_ms = unity::TimeUtil::TimeDelta(&current, &icon_hide_time);
     return 1.0f - CLAMP((float) hide_ms / (float) ANIM_DURATION_SHORT, 0.0f, 1.0f);
   }
 }
@@ -543,7 +543,7 @@
 float Launcher::IconPresentProgress(AbstractLauncherIcon::Ptr icon, struct timespec const& current) const
 {
   struct timespec icon_present_time = icon->GetQuirkTime(AbstractLauncherIcon::Quirk::PRESENTED);
-  int ms = unity::TimeUtil::TimeDelta(&current, &icon_present_time);
+  DeltaTime ms = unity::TimeUtil::TimeDelta(&current, &icon_present_time);
   float result = CLAMP((float) ms / (float) ANIM_DURATION, 0.0f, 1.0f);
 
   if (icon->GetQuirk(AbstractLauncherIcon::Quirk::PRESENTED))
@@ -555,7 +555,7 @@
 float Launcher::IconUrgentProgress(AbstractLauncherIcon::Ptr icon, struct timespec const& current) const
 {
   struct timespec urgent_time = icon->GetQuirkTime(AbstractLauncherIcon::Quirk::URGENT);
-  int urgent_ms = unity::TimeUtil::TimeDelta(&current, &urgent_time);
+  DeltaTime urgent_ms = unity::TimeUtil::TimeDelta(&current, &urgent_time);
   float result;
 
   if (options()->urgent_animation() == URGENT_ANIMATION_WIGGLE)
@@ -572,7 +572,7 @@
 float Launcher::IconDropDimValue(AbstractLauncherIcon::Ptr icon, struct timespec const& current) const
 {
   struct timespec dim_time = icon->GetQuirkTime(AbstractLauncherIcon::Quirk::DROP_DIM);
-  int dim_ms = unity::TimeUtil::TimeDelta(&current, &dim_time);
+  DeltaTime dim_ms = unity::TimeUtil::TimeDelta(&current, &dim_time);
   float result = CLAMP((float) dim_ms / (float) ANIM_DURATION, 0.0f, 1.0f);
 
   if (icon->GetQuirk(AbstractLauncherIcon::Quirk::DROP_DIM))
@@ -584,7 +584,7 @@
 float Launcher::IconDesatValue(AbstractLauncherIcon::Ptr icon, struct timespec const& current) const
 {
   struct timespec dim_time = icon->GetQuirkTime(AbstractLauncherIcon::Quirk::DESAT);
-  int ms = unity::TimeUtil::TimeDelta(&current, &dim_time);
+  DeltaTime ms = unity::TimeUtil::TimeDelta(&current, &dim_time);
   float result = CLAMP((float) ms / (float) ANIM_DURATION_SHORT_SHORT, 0.0f, 1.0f);
 
   if (icon->GetQuirk(AbstractLauncherIcon::Quirk::DESAT))
@@ -596,14 +596,14 @@
 float Launcher::IconShimmerProgress(AbstractLauncherIcon::Ptr icon, struct timespec const& current) const
 {
   struct timespec shimmer_time = icon->GetQuirkTime(AbstractLauncherIcon::Quirk::SHIMMER);
-  int shimmer_ms = unity::TimeUtil::TimeDelta(&current, &shimmer_time);
+  DeltaTime shimmer_ms = unity::TimeUtil::TimeDelta(&current, &shimmer_time);
   return CLAMP((float) shimmer_ms / (float) ANIM_DURATION_LONG, 0.0f, 1.0f);
 }
 
 float Launcher::IconCenterTransitionProgress(AbstractLauncherIcon::Ptr icon, struct timespec const& current) const
 {
   struct timespec save_time = icon->GetQuirkTime(AbstractLauncherIcon::Quirk::CENTER_SAVED);
-  int save_ms = unity::TimeUtil::TimeDelta(&current, &save_time);
+  DeltaTime save_ms = unity::TimeUtil::TimeDelta(&current, &save_time);
   return CLAMP((float) save_ms / (float) ANIM_DURATION, 0.0f, 1.0f);
 }
 
@@ -619,7 +619,7 @@
 float Launcher::IconPulseOnceValue(AbstractLauncherIcon::Ptr icon, struct timespec const &current) const
 {
   struct timespec pulse_time = icon->GetQuirkTime(AbstractLauncherIcon::Quirk::PULSE_ONCE);
-  int pulse_ms = unity::TimeUtil::TimeDelta(&current, &pulse_time);
+  DeltaTime pulse_ms = unity::TimeUtil::TimeDelta(&current, &pulse_time);
   double pulse_progress = (double) CLAMP((float) pulse_ms / (ANIM_DURATION_LONG * PULSE_BLINK_LAMBDA * 2), 0.0f, 1.0f);
 
   if (pulse_progress == 1.0f)
@@ -640,7 +640,7 @@
 float Launcher::IconStartingBlinkValue(AbstractLauncherIcon::Ptr icon, struct timespec const& current) const
 {
   struct timespec starting_time = icon->GetQuirkTime(AbstractLauncherIcon::Quirk::STARTING);
-  int starting_ms = unity::TimeUtil::TimeDelta(&current, &starting_time);
+  DeltaTime starting_ms = unity::TimeUtil::TimeDelta(&current, &starting_time);
   double starting_progress = (double) CLAMP((float) starting_ms / (float)(ANIM_DURATION_LONG * STARTING_BLINK_LAMBDA), 0.0f, 1.0f);
   double val = IsBackLightModeToggles() ? 3.0f : 4.0f;
   return 0.5f + (float)(std::cos(M_PI * val * starting_progress)) * 0.5f;
@@ -649,7 +649,7 @@
 float Launcher::IconStartingPulseValue(AbstractLauncherIcon::Ptr icon, struct timespec const& current) const
 {
   struct timespec starting_time = icon->GetQuirkTime(AbstractLauncherIcon::Quirk::STARTING);
-  int starting_ms = unity::TimeUtil::TimeDelta(&current, &starting_time);
+  DeltaTime starting_ms = unity::TimeUtil::TimeDelta(&current, &starting_time);
   double starting_progress = (double) CLAMP((float) starting_ms / (float)(ANIM_DURATION_LONG * MAX_STARTING_BLINKS * STARTING_BLINK_LAMBDA * 2), 0.0f, 1.0f);
 
   if (starting_progress == 1.0f && !icon->GetQuirk(AbstractLauncherIcon::Quirk::RUNNING))
@@ -666,7 +666,7 @@
   float result = 0.0f;
 
   struct timespec running_time = icon->GetQuirkTime(AbstractLauncherIcon::Quirk::RUNNING);
-  int running_ms = unity::TimeUtil::TimeDelta(&current, &running_time);
+  DeltaTime running_ms = unity::TimeUtil::TimeDelta(&current, &running_time);
   float running_progress = CLAMP((float) running_ms / (float) ANIM_DURATION_SHORT, 0.0f, 1.0f);
 
   if (!icon->GetQuirk(AbstractLauncherIcon::Quirk::RUNNING))
@@ -731,7 +731,7 @@
 float Launcher::IconProgressBias(AbstractLauncherIcon::Ptr icon, struct timespec const& current) const
 {
   struct timespec icon_progress_time = icon->GetQuirkTime(AbstractLauncherIcon::Quirk::PROGRESS);
-  int ms = unity::TimeUtil::TimeDelta(&current, &icon_progress_time);
+  DeltaTime ms = unity::TimeUtil::TimeDelta(&current, &icon_progress_time);
   float result = CLAMP((float) ms / (float) ANIM_DURATION, 0.0f, 1.0f);
 
   if (icon->GetQuirk(AbstractLauncherIcon::Quirk::PROGRESS))

=== modified file 'launcher/SwitcherView.cpp'
--- launcher/SwitcherView.cpp	2012-08-30 18:14:19 +0000
+++ launcher/SwitcherView.cpp	2012-12-04 08:54:05 +0000
@@ -254,7 +254,7 @@
 {
   std::vector<Window> xids = model_->DetailXids ();
 
-  int ms_since_change = TimeUtil::TimeDelta(&current, &save_time_);
+  DeltaTime ms_since_change = TimeUtil::TimeDelta(&current, &save_time_);
   float progress = MIN (1.0f, (float) ms_since_change / (float) animation_length());
 
   for (Window window : xids)
@@ -511,7 +511,7 @@
       ++i;
     }
 
-    int ms_since_change = TimeUtil::TimeDelta(&current, &save_time_);
+    DeltaTime ms_since_change = TimeUtil::TimeDelta(&current, &save_time_);
     if (saved_args_.size () == results.size () && ms_since_change < animation_length)
     {
       float progress = (float) ms_since_change / (float) animation_length();
@@ -623,7 +623,7 @@
   text_view_->SetBaseY(last_background_.y + last_background_.height - 45);
   text_view_->Draw(GfxContext, force_draw);
 
-  int ms_since_change = TimeUtil::TimeDelta(&current_, &save_time_);
+  DeltaTime ms_since_change = TimeUtil::TimeDelta(&current_, &save_time_);
 
   if (ms_since_change < animation_length && !redraw_idle_)
   {

=== modified file 'plugins/unityshell/src/ElapsedTimeMonitor.cpp'
--- plugins/unityshell/src/ElapsedTimeMonitor.cpp	2012-03-14 06:24:18 +0000
+++ plugins/unityshell/src/ElapsedTimeMonitor.cpp	2012-12-04 08:54:05 +0000
@@ -39,7 +39,7 @@
 {
   struct timespec current;
   clock_gettime(CLOCK_MONOTONIC, &current);
-  int diff = TimeUtil::TimeDelta(&current, &_start);
+  DeltaTime diff = TimeUtil::TimeDelta(&current, &_start);
 
   variant::BuilderWrapper(builder)
     .add("elapsed-time", diff);

=== modified file 'tests/CMakeLists.txt'
--- tests/CMakeLists.txt	2012-11-08 09:10:21 +0000
+++ tests/CMakeLists.txt	2012-12-04 08:54:05 +0000
@@ -149,6 +149,7 @@
                  test_shortcut_model.cpp
                  test_shortcut_private.cpp
                  test_showdesktop_handler.cpp
+                 test_time_util.cpp
                  test_unityshell_private.cpp
                  ${CMAKE_CURRENT_BINARY_DIR}/test_glib_signals_utils_marshal.cpp
                  ${CMAKE_SOURCE_DIR}/launcher/AbstractLauncherIcon.cpp

=== modified file 'tests/test_glib_source.cpp'
--- tests/test_glib_source.cpp	2012-09-04 09:41:49 +0000
+++ tests/test_glib_source.cpp	2012-12-04 08:54:05 +0000
@@ -141,7 +141,7 @@
   EXPECT_FALSE(timeout.IsRunning());
   EXPECT_TRUE(callback_called);
   EXPECT_EQ(callback_call_count, 1);
-  int time_delta = unity::TimeUtil::TimeDelta(&post, &pre);
+  DeltaTime time_delta = unity::TimeUtil::TimeDelta(&post, &pre);
   EXPECT_GE(time_delta, 100);
   EXPECT_LT(time_delta, 110);
 }
@@ -163,7 +163,7 @@
 
   EXPECT_TRUE(callback_called);
   EXPECT_EQ(callback_call_count, 6);
-  int time_delta = unity::TimeUtil::TimeDelta(&post, &pre);
+  DeltaTime time_delta = unity::TimeUtil::TimeDelta(&post, &pre);
   EXPECT_GE(time_delta, 600);
   EXPECT_LT(time_delta, 700);
 }
@@ -177,7 +177,7 @@
 
   Utils::WaitForTimeoutMSec(500);
   EXPECT_FALSE(timeout.IsRunning());
-  int time_delta = unity::TimeUtil::TimeDelta(&post, &pre);
+  DeltaTime time_delta = unity::TimeUtil::TimeDelta(&post, &pre);
   EXPECT_GE(time_delta, 100);
   EXPECT_LT(time_delta, 110);
 }
@@ -337,7 +337,7 @@
   EXPECT_FALSE(timeout.IsRunning());
   EXPECT_TRUE(callback_called);
   EXPECT_EQ(callback_call_count, 1);
-  int time_delta = unity::TimeUtil::TimeDelta(&post, &pre);
+  DeltaTime time_delta = unity::TimeUtil::TimeDelta(&post, &pre);
   EXPECT_GE(time_delta, 500);
   EXPECT_LT(time_delta, 2000);
 }
@@ -360,7 +360,7 @@
   EXPECT_TRUE(callback_called);
   EXPECT_GE(callback_call_count, 3);
   EXPECT_LE(callback_call_count, 4);
-  int time_delta = unity::TimeUtil::TimeDelta(&post, &pre);
+  DeltaTime time_delta = unity::TimeUtil::TimeDelta(&post, &pre);
   EXPECT_GE(time_delta, 3500);
   EXPECT_LT(time_delta, 5000);
 }
@@ -424,7 +424,7 @@
 
   EXPECT_TRUE(callback_called);
   EXPECT_GT(callback_call_count, 1);
-  int time_delta = unity::TimeUtil::TimeDelta(&post, &pre);
+  DeltaTime time_delta = unity::TimeUtil::TimeDelta(&post, &pre);
   EXPECT_GE(time_delta, 100);
   EXPECT_LT(time_delta, 200);
 }

=== added file 'tests/test_time_util.cpp'
--- tests/test_time_util.cpp	1970-01-01 00:00:00 +0000
+++ tests/test_time_util.cpp	2012-12-04 08:54:05 +0000
@@ -0,0 +1,38 @@
+// -*- Mode: C++; indent-tabs-mode: nil; tab-width: 2 -*-
+/*
+* Copyright (C) 2012 Canonical Ltd
+*
+* This program is free software: you can redistribute it and/or modify
+* it under the terms of the GNU General Public License version 3 as
+* published by the Free Software Foundation.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+* GNU General Public License for more details.
+*
+* You should have received a copy of the GNU General Public License
+* along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*
+* Authored by: Brandon Schaefer <brandon.schaefer@canonical.com>
+*
+*/
+
+
+#include <cinttypes>
+#include <gtest/gtest.h>
+#include <unity-shared/TimeUtil.h>
+
+using namespace testing;
+
+TEST(TestTimeUtil, Testin32BufferOverflow)
+{
+  struct timespec start, end;
+  unity::TimeUtil::SetTimeStruct(&start);
+  unity::TimeUtil::SetTimeStruct(&end);
+
+  end.tv_sec = start.tv_sec + INT32_MAX;
+
+  EXPECT_GT(unity::TimeUtil::TimeDelta(&end, &start), 0);
+}
+

=== modified file 'unity-shared/TimeUtil.h'
--- unity-shared/TimeUtil.h	2012-05-06 23:48:38 +0000
+++ unity-shared/TimeUtil.h	2012-12-04 08:54:05 +0000
@@ -19,29 +19,34 @@
  */
 
 #include <time.h>
+#include <cstdint>
+
+typedef int64_t DeltaTime;
 
 namespace unity {
 
 class TimeUtil
 {
 public:
-  static int TimeDelta (struct timespec const* x, struct timespec const* y)
+  static DeltaTime TimeDelta (struct timespec const* x, struct timespec const* y)
   {
-    return ((x->tv_sec - y->tv_sec) * 1000) + ((x->tv_nsec - y->tv_nsec) / 1000000);
+    DeltaTime d_sec = (x->tv_sec - y->tv_sec);
+    DeltaTime d_nsec = (x->tv_nsec - y->tv_nsec);
+    return (d_sec * 1000) + (d_nsec / 1000000);
   }
 
-  static void SetTimeStruct(struct timespec* timer, struct timespec* sister = 0, int sister_relation = 0)
+  static void SetTimeStruct(struct timespec* timer, struct timespec* sister = 0, DeltaTime sister_relation = 0)
   {
     struct timespec current;
     clock_gettime(CLOCK_MONOTONIC, &current);
 
     if (sister)
     {
-      int diff = TimeDelta(&current, sister);
+      DeltaTime diff = TimeDelta(&current, sister);
 
       if (diff < sister_relation)
       {
-        int remove = sister_relation - diff;
+        DeltaTime remove = sister_relation - diff;
         SetTimeBack(&current, remove);
       }
     }
@@ -50,7 +55,7 @@
     timer->tv_nsec = current.tv_nsec;
   }
 
-  static void SetTimeBack(struct timespec* timeref, int remove)
+  static void SetTimeBack(struct timespec* timeref, DeltaTime remove)
   {
     timeref->tv_sec -= remove / 1000;
     remove = remove % 1000;

